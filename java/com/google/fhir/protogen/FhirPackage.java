//    Copyright 2019 Google LLC
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package com.google.fhir.protogen;

import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.common.io.ByteStreams;
import com.google.fhir.common.InvalidFhirException;
import com.google.fhir.common.JsonFormat;
import com.google.fhir.common.ResourceUtils;
import com.google.fhir.proto.Annotations.FhirVersion;
import com.google.fhir.proto.PackageInfo;
import com.google.fhir.r4.core.Bundle;
import com.google.fhir.r4.core.CodeSystem;
import com.google.fhir.r4.core.SearchParameter;
import com.google.fhir.r4.core.StructureDefinition;
import com.google.fhir.r4.core.ValueSet;
import com.google.protobuf.Message;
import com.google.protobuf.TextFormat;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

/**
 * Represents a FHIR Proto package.
 *
 * <p>Includes resource definitions and package information.
 *
 * <p>Constructed from a ZIP file containing the JSON files of the resources and optionally a
 * PackageInfo file that describes the package. The ZIP is generated by the `fhir_package` rule in
 * protogen.bzl.
 *
 * <p>TODO: Support NPM-based FHIR Packages for proto generation.
 */
public class FhirPackage {
  public final PackageInfo packageInfo;
  public final List<StructureDefinition> structureDefinitions;
  public final List<SearchParameter> searchParameters;
  public final List<CodeSystem> codeSystems;
  public final List<ValueSet> valueSets;

  public FhirPackage(
      PackageInfo packageInfo,
      List<StructureDefinition> structureDefinitions,
      List<SearchParameter> searchParameters,
      List<CodeSystem> codeSystems,
      List<ValueSet> valueSets) {
    this.packageInfo = packageInfo;
    this.structureDefinitions = structureDefinitions;
    this.searchParameters = searchParameters;
    this.codeSystems = codeSystems;
    this.valueSets = valueSets;
  }

  @Override
  public boolean equals(Object other) {
    return other instanceof FhirPackage
        && ((FhirPackage) other)
            .packageInfo
            .getProtoPackage()
            .equals(packageInfo.getProtoPackage());
  }

  @Override
  public int hashCode() {
    return packageInfo.getProtoPackage().hashCode();
  }

  public static boolean isCorePackage(PackageInfo packageInfo) {
    return packageInfo
        .getProtoPackage()
        .equals(
            com.google.fhir.common.FhirVersion.fromAnnotation(packageInfo.getFhirVersion())
                .coreProtoPackage);
  }

  public boolean isCorePackage() {
    return isCorePackage(packageInfo);
  }

  /**
   * Loads a package ZIP into a FhirPackage.
   *
   * <p>Parses all defining resources that are part of the spec.
   *
   * <p>A PackageInfo can be provided and must be named with the suffix "package_info.prototxt" or
   * "package_info.textproto".
   *
   * <p>To side load a PackageInfo proto, use the version of this that accepts a PackageInfo proto.
   *
   * <p>TODO: Support NPM-based FHIR Packages for proto generation.
   *
   * @param zipFilePath The absolute path to the ZIP file that is loaded.
   */
  public static FhirPackage load(String zipFilePath) throws IOException, InvalidFhirException {
    ZipFile zipFile = new ZipFile(new File(zipFilePath));
    Enumeration<? extends ZipEntry> entries = zipFile.entries();

    PackageInfo packageInfo = null;
    Map<String, String> jsonFiles = new HashMap<>();

    while (entries.hasMoreElements()) {
      ZipEntry entry = entries.nextElement();
      if (entry.getName().endsWith("package_info.prototxt")
          || entry.getName().endsWith("package_info.textproto")) {
        if (packageInfo != null) {
          throw new IllegalArgumentException(
              "Only one PackageInfo should be provided: " + zipFilePath);
        }
        String protoTxt = new String(ByteStreams.toByteArray(zipFile.getInputStream(entry)), UTF_8);
        PackageInfo.Builder infoBuilder = PackageInfo.newBuilder();
        TextFormat.getParser().merge(protoTxt, infoBuilder);
        packageInfo = infoBuilder.build();
      } else if (entry.getName().endsWith(".json")) {
        String json = new String(ByteStreams.toByteArray(zipFile.getInputStream(entry)), UTF_8);
        jsonFiles.put(entry.getName(), json);
      }
    }

    return makeFromJsonAndPackageInfo(jsonFiles, packageInfo);
  }

  /**
   * Loads a package ZIP into a FhirPackage.
   *
   * <p>Parses all defining resources that are part of the spec.
   *
   * <p>To read PackageInfo out of the ZIP itself, use the version of this that does not accept a
   * PackageProto argument.
   *
   * @param zipFilePath The absolute path to the ZIP file that is loaded.
   * @param packageInfo The package information to load. This package information is used,
   *     irrespective of whether the ZIP contains one.
   */
  public static FhirPackage load(String zipFilePath, PackageInfo packageInfo)
      throws IOException, InvalidFhirException {
    ZipFile zipFile = new ZipFile(new File(zipFilePath));
    Enumeration<? extends ZipEntry> entries = zipFile.entries();

    Map<String, String> jsonFiles = new HashMap<>();

    while (entries.hasMoreElements()) {
      ZipEntry entry = entries.nextElement();
      if (entry.getName().endsWith("package_info.prototxt")
          || entry.getName().endsWith("package_info.textproto")) {
        System.out.println(
            "Ignoring PackageInfo in "
                + zipFilePath
                + " because PackageInfo was explicitly provided. Call the overload with no"
                + " PackageInfo to use the one from the ZIP.");
      } else if (entry.getName().endsWith(".json")) {
        String json = new String(ByteStreams.toByteArray(zipFile.getInputStream(entry)), UTF_8);
        jsonFiles.put(entry.getName(), json);
      }
    }

    return makeFromJsonAndPackageInfo(jsonFiles, packageInfo);
  }

  /**
   * Filters the package to only serve resources (`StructureDefinition`-s) matching the provided
   * `filter`.
   *
   * <p>Filters are not additive. In other words, if this method is called multiple times only the
   * latest `filter` is applied.
   */
  FhirPackage filterResources(Predicate<StructureDefinition> filter) {
    return new FhirPackage(
        packageInfo,
        structureDefinitions.stream().filter(filter).collect(Collectors.toList()),
        searchParameters,
        codeSystems,
        valueSets);
  }

  private static final Pattern RESOURCE_TYPE_PATTERN =
      Pattern.compile("\"resourceType\"\\s*:\\s*\"([A-Za-z]*)\"");

  private static Optional<String> getResourceType(String json) {
    Matcher matcher = RESOURCE_TYPE_PATTERN.matcher(json);
    return matcher.find() ? Optional.of(matcher.group(1)) : Optional.empty();
  }

  private static FhirPackage makeFromJsonAndPackageInfo(
      Map<String, String> jsonFiles, PackageInfo packageInfo) throws InvalidFhirException {
    if (packageInfo != null) {
      if (packageInfo.getProtoPackage().isEmpty()) {
        throw new IllegalArgumentException(
            "When PackageInfo is provided, must specify `proto_package`.");
      }
      if (packageInfo.getFhirVersion() == FhirVersion.FHIR_VERSION_UNKNOWN) {
        throw new IllegalArgumentException(
            "When PackageInfo is provided, must specify `fhir_version`.");
      }
    }

    List<ValueSet> valueSets = new ArrayList<>();
    List<CodeSystem> codeSystems = new ArrayList<>();
    List<StructureDefinition> structureDefinitions = new ArrayList<>();
    List<SearchParameter> searchParameters = new ArrayList<>();
    // TODO: Make Fhir Parser injectable.
    JsonFormat.Parser parser =
        packageInfo == null
            ? JsonFormat.getParser()
            : JsonFormat.getSpecParser(packageInfo.getFhirVersion());

    for (Map.Entry<String, String> jsonFile : jsonFiles.entrySet()) {
      String json = jsonFile.getValue();
      Optional<String> expectedType = getResourceType(json);
      if (!expectedType.isPresent()) {
        System.out.println("Unhandled JSON entry: " + jsonFile.getKey());
        continue;
      }

      if (expectedType.get().equals("ValueSet")) {
        valueSets.add(parser.merge(json, ValueSet.newBuilder()).build());
      } else if (expectedType.get().equals("CodeSystem")) {
        codeSystems.add(parser.merge(json, CodeSystem.newBuilder()).build());
      } else if (expectedType.get().equals("StructureDefinition")) {
        structureDefinitions.add(parser.merge(json, StructureDefinition.newBuilder()).build());
      } else if (expectedType.get().equals("SearchParameter")) {
        searchParameters.add(parser.merge(json, SearchParameter.newBuilder()).build());
      } else if (expectedType.get().equals("Bundle")) {
        // TODO: Theoretically a bundle could contain a bundle, modify implementation
        // to accomodate.
        Bundle bundle = parser.merge(json, Bundle.newBuilder()).build();
        for (Bundle.Entry bundleEntry : bundle.getEntryList()) {
          Message contained = ResourceUtils.getContainedResource(bundleEntry.getResource());
          if (contained instanceof ValueSet) {
            valueSets.add((ValueSet) contained);
          } else if (contained instanceof CodeSystem) {
            codeSystems.add((CodeSystem) contained);
          } else if (contained instanceof StructureDefinition) {
            structureDefinitions.add((StructureDefinition) contained);
          } else if (contained instanceof SearchParameter) {
            searchParameters.add((SearchParameter) contained);
          }
        }
      } else {
        System.out.println("Unhandled JSON entry: " + jsonFile.getKey());
      }
    }
    return new FhirPackage(
        packageInfo, structureDefinitions, searchParameters, codeSystems, valueSets);
  }
}
